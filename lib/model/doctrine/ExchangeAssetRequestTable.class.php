<?php

/**
 * ExchangeAssetRequestTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ExchangeAssetRequestTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ExchangeAssetRequestTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ExchangeAssetRequest');
    }
    public static function checkRequest($securityKey, $requestId)
    {
        return self::getInstance()->createQuery('a')
            ->select('a.*')
            ->where('a.securityKey = ?', $securityKey)
            ->andWhere('a.requestId = ?', $requestId)
            ->andWhere('a.status = ?', VtCommonEnum::NUMBER_ZERO)
            ->andWhere('a.request_topup_id is null')
            ->fetchOne();
    }
    public static function getTotalRevenueByDate($values = null)
    {
        $query = ExchangeAssetRequestTable::getInstance()->createQuery('a');
        $query->select("sum(a.totalParValue) as sum_money, DATE(a.created_at) as purchase_date");
        $query->groupBy("DATE(a.created_at)");
        $query->orderBy("a.created_at asc");
        $query->where("a.status = 1");
        $query->andWhere("a.created_at > ?",  Date("Y-m-d H:i:s", time() - 86400* 7));
        return $query->fetchArray();
    }
    public static function getTotalRevenue($values = null)
    {
        $query = ExchangeAssetRequestTable::getInstance()->createQuery('a');
        $query->select("sum(a.totalParValue) as sum_money");
        $query->orderBy("a.created_at asc");
        $query->where("a.status = 1");
        if (array_key_exists('created_date', $values)) {
            $text = trim($values['created_date']['text']);
            $dateArr = explode('-', $text);
            if (count($dateArr) == 2) {
                $date1 = trim($dateArr[0]);
                $date1Arr = explode('/', $date1);
                $date1Str = '';
                if (count($date1Arr) == 3) {
                    $date1Str = $date1Arr[2] . '-' . $date1Arr[1] . '-' . $date1Arr[0] . ' 00:00:00';
                }
                $date2 = trim($dateArr[1]);
                $date2Arr = explode('/', $date2);
                $date2Str = '';
                if (count($date2Arr) == 3) {
                    $date2Str = $date2Arr[2] . '-' . $date2Arr[1] . '-' . $date2Arr[0] . ' 23:59:59';
                }
                $query->andWhere('a.created_at BETWEEN ? AND ?', array($date1Str, $date2Str));
            }
        }
        if(array_key_exists('status', $values)&& $values['status'] != ''){
            $query->andWhere( ".status = ?",$values["status"] );
        }
        if(array_key_exists('user_name', $values)&& $values['user_name'] != ''){
            $query->andWhere('lower(u.displayName) LIKE ?  OR u.userId = ?  OR u.userName LIKE  ?',
                array('%' . VtHelper::translateQuery($values['user_name']['text']) . '%', $values['user_name']['text'],
                    '%' . VtHelper::translateQuery($values['user_name']['text']) . '%'));
        }
        if(array_key_exists('responseData', $values)&& $values['responseData'] != ''){
            $query->andWhere('lower(a.responseData) LIKE  ?', VtHelper::translateQuery($values['responseData']['text']) . '%');
        }

        if(array_key_exists('verified_phone', $values)&& $values['verified_phone']['text'] != ''){
            $phone =$values['verified_phone']['text'];
            if (substr($phone, 0, 1) == '0') { #0975292582
                $phone = substr($values['verified_phone']['text'], 1);
            }
            $query->andwhere("i.verifiedPhone like ?", "%".  $phone . "%");
        }
        $query->leftJoin("a.User u");
        $query->leftJoin("u.UserInfo i");

        return $query->fetchOne()->sum_money;
    }
    public static function getSumRequestByDay($userId)
    {
        $query = ExchangeAssetRequestTable::getInstance()->createQuery('a');
        $query->select("sum(a.totalParValue) as sum_money");
        $query->where("a.requestUserId = ?" . $userId);
        $query->andWhere("a.created_at > ?",  date("Y-m-d"));
        return $query->fetchOne();
    }


}