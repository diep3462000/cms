<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Room', 'doctrine');

/**
 * BaseRoom
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $roomid
 * @property integer $gameid
 * @property string $roomname
 * @property integer $viproom
 * @property integer $mincash
 * @property integer $mingold
 * @property integer $minlevel
 * @property integer $roomcapacity
 * @property integer $playersize
 * @property integer $minbet
 * @property integer $tax
 * @property integer $maxroomplay
 * @property integer $permanentroomplay
 * @property integer $kicklimit
 * @property timestamp $starttime
 * @property timestamp $endtime
 * @property integer $status
 * 
 * @method integer   getRoomid()            Returns the current record's "roomid" value
 * @method integer   getGameid()            Returns the current record's "gameid" value
 * @method string    getRoomname()          Returns the current record's "roomname" value
 * @method integer   getViproom()           Returns the current record's "viproom" value
 * @method integer   getMincash()           Returns the current record's "mincash" value
 * @method integer   getMingold()           Returns the current record's "mingold" value
 * @method integer   getMinlevel()          Returns the current record's "minlevel" value
 * @method integer   getRoomcapacity()      Returns the current record's "roomcapacity" value
 * @method integer   getPlayersize()        Returns the current record's "playersize" value
 * @method integer   getMinbet()            Returns the current record's "minbet" value
 * @method integer   getTax()               Returns the current record's "tax" value
 * @method integer   getMaxroomplay()       Returns the current record's "maxroomplay" value
 * @method integer   getPermanentroomplay() Returns the current record's "permanentroomplay" value
 * @method integer   getKicklimit()         Returns the current record's "kicklimit" value
 * @method timestamp getStarttime()         Returns the current record's "starttime" value
 * @method timestamp getEndtime()           Returns the current record's "endtime" value
 * @method integer   getStatus()            Returns the current record's "status" value
 * @method Room      setRoomid()            Sets the current record's "roomid" value
 * @method Room      setGameid()            Sets the current record's "gameid" value
 * @method Room      setRoomname()          Sets the current record's "roomname" value
 * @method Room      setViproom()           Sets the current record's "viproom" value
 * @method Room      setMincash()           Sets the current record's "mincash" value
 * @method Room      setMingold()           Sets the current record's "mingold" value
 * @method Room      setMinlevel()          Sets the current record's "minlevel" value
 * @method Room      setRoomcapacity()      Sets the current record's "roomcapacity" value
 * @method Room      setPlayersize()        Sets the current record's "playersize" value
 * @method Room      setMinbet()            Sets the current record's "minbet" value
 * @method Room      setTax()               Sets the current record's "tax" value
 * @method Room      setMaxroomplay()       Sets the current record's "maxroomplay" value
 * @method Room      setPermanentroomplay() Sets the current record's "permanentroomplay" value
 * @method Room      setKicklimit()         Sets the current record's "kicklimit" value
 * @method Room      setStarttime()         Sets the current record's "starttime" value
 * @method Room      setEndtime()           Sets the current record's "endtime" value
 * @method Room      setStatus()            Sets the current record's "status" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     diepth2
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRoom extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('room');
        $this->hasColumn('roomid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('gameid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('roomname', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('viproom', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('mincash', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('mingold', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('minlevel', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('roomcapacity', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '50',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('playersize', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('minbet', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tax', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '5',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('maxroomplay', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '100',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('permanentroomplay', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('kicklimit', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('starttime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('endtime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}