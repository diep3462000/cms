<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Room', 'doctrine');

/**
 * BaseRoom
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $roomid
 * @property integer $gameId
 * @property string $roomName
 * @property integer $vipRoom
 * @property integer $minCash
 * @property integer $minGold
 * @property integer $minLevel
 * @property integer $roomCapacity
 * @property integer $playerSize
 * @property integer $minBet
 * @property integer $tax
 * @property integer $maxRoomplay
 * @property integer $permanentRoomPlay
 * @property integer $kickLimit
 * @property timestamp $startTime
 * @property timestamp $endTime
 * @property integer $status
 * 
 * @method integer   getRoomid()            Returns the current record's "roomid" value
 * @method integer   getGameId()            Returns the current record's "gameId" value
 * @method string    getRoomName()          Returns the current record's "roomName" value
 * @method integer   getVipRoom()           Returns the current record's "vipRoom" value
 * @method integer   getMinCash()           Returns the current record's "minCash" value
 * @method integer   getMinGold()           Returns the current record's "minGold" value
 * @method integer   getMinLevel()          Returns the current record's "minLevel" value
 * @method integer   getRoomCapacity()      Returns the current record's "roomCapacity" value
 * @method integer   getPlayerSize()        Returns the current record's "playerSize" value
 * @method integer   getMinBet()            Returns the current record's "minBet" value
 * @method integer   getTax()               Returns the current record's "tax" value
 * @method integer   getMaxRoomplay()       Returns the current record's "maxRoomplay" value
 * @method integer   getPermanentRoomPlay() Returns the current record's "permanentRoomPlay" value
 * @method integer   getKickLimit()         Returns the current record's "kickLimit" value
 * @method timestamp getStartTime()         Returns the current record's "startTime" value
 * @method timestamp getEndTime()           Returns the current record's "endTime" value
 * @method integer   getStatus()            Returns the current record's "status" value
 * @method Room      setRoomid()            Sets the current record's "roomid" value
 * @method Room      setGameId()            Sets the current record's "gameId" value
 * @method Room      setRoomName()          Sets the current record's "roomName" value
 * @method Room      setVipRoom()           Sets the current record's "vipRoom" value
 * @method Room      setMinCash()           Sets the current record's "minCash" value
 * @method Room      setMinGold()           Sets the current record's "minGold" value
 * @method Room      setMinLevel()          Sets the current record's "minLevel" value
 * @method Room      setRoomCapacity()      Sets the current record's "roomCapacity" value
 * @method Room      setPlayerSize()        Sets the current record's "playerSize" value
 * @method Room      setMinBet()            Sets the current record's "minBet" value
 * @method Room      setTax()               Sets the current record's "tax" value
 * @method Room      setMaxRoomplay()       Sets the current record's "maxRoomplay" value
 * @method Room      setPermanentRoomPlay() Sets the current record's "permanentRoomPlay" value
 * @method Room      setKickLimit()         Sets the current record's "kickLimit" value
 * @method Room      setStartTime()         Sets the current record's "startTime" value
 * @method Room      setEndTime()           Sets the current record's "endTime" value
 * @method Room      setStatus()            Sets the current record's "status" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     diepth2
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRoom extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('room');
        $this->hasColumn('roomid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('gameId', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('roomName', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('vipRoom', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('minCash', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('minGold', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('minLevel', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('roomCapacity', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '50',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('playerSize', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('minBet', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tax', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '5',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('maxRoomplay', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '100',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('permanentRoomPlay', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('kickLimit', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('startTime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('endTime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}