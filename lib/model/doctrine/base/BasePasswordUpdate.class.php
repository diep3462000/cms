<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PasswordUpdate', 'doctrine');

/**
 * BasePasswordUpdate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $passwordupdateid
 * @property integer $userid
 * @property string $username
 * @property string $log
 * @property timestamp $updatetime
 * @property string $mysql_user
 * @property string $oldpass
 * @property string $newpass
 * 
 * @method integer        getPasswordupdateid() Returns the current record's "passwordupdateid" value
 * @method integer        getUserid()           Returns the current record's "userid" value
 * @method string         getUsername()         Returns the current record's "username" value
 * @method string         getLog()              Returns the current record's "log" value
 * @method timestamp      getUpdatetime()       Returns the current record's "updatetime" value
 * @method string         getMysqlUser()        Returns the current record's "mysql_user" value
 * @method string         getOldpass()          Returns the current record's "oldpass" value
 * @method string         getNewpass()          Returns the current record's "newpass" value
 * @method PasswordUpdate setPasswordupdateid() Sets the current record's "passwordupdateid" value
 * @method PasswordUpdate setUserid()           Sets the current record's "userid" value
 * @method PasswordUpdate setUsername()         Sets the current record's "username" value
 * @method PasswordUpdate setLog()              Sets the current record's "log" value
 * @method PasswordUpdate setUpdatetime()       Sets the current record's "updatetime" value
 * @method PasswordUpdate setMysqlUser()        Sets the current record's "mysql_user" value
 * @method PasswordUpdate setOldpass()          Sets the current record's "oldpass" value
 * @method PasswordUpdate setNewpass()          Sets the current record's "newpass" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     diepth2
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePasswordUpdate extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('password_update');
        $this->hasColumn('passwordupdateid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('userid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('username', 'string', 75, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 75,
             ));
        $this->hasColumn('log', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('updatetime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('mysql_user', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('oldpass', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('newpass', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}