<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('GameHistory', 'doctrine');

/**
 * BaseGameHistory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $gamehistoryid
 * @property integer $userid
 * @property string $username
 * @property integer $cash
 * @property integer $currentcash
 * @property string $description
 * @property integer $gameid
 * @property integer $gametransactionid
 * @property timestamp $time
 * @property integer $money
 * @property string $cp
 * @property string $title
 * @property integer $tax
 * @property integer $taxpercent
 * @property integer $gold
 * @property integer $currentgold
 * 
 * @method integer     getGamehistoryid()     Returns the current record's "gamehistoryid" value
 * @method integer     getUserid()            Returns the current record's "userid" value
 * @method string      getUsername()          Returns the current record's "username" value
 * @method integer     getCash()              Returns the current record's "cash" value
 * @method integer     getCurrentcash()       Returns the current record's "currentcash" value
 * @method string      getDescription()       Returns the current record's "description" value
 * @method integer     getGameid()            Returns the current record's "gameid" value
 * @method integer     getGametransactionid() Returns the current record's "gametransactionid" value
 * @method timestamp   getTime()              Returns the current record's "time" value
 * @method integer     getMoney()             Returns the current record's "money" value
 * @method string      getCp()                Returns the current record's "cp" value
 * @method string      getTitle()             Returns the current record's "title" value
 * @method integer     getTax()               Returns the current record's "tax" value
 * @method integer     getTaxpercent()        Returns the current record's "taxpercent" value
 * @method integer     getGold()              Returns the current record's "gold" value
 * @method integer     getCurrentgold()       Returns the current record's "currentgold" value
 * @method GameHistory setGamehistoryid()     Sets the current record's "gamehistoryid" value
 * @method GameHistory setUserid()            Sets the current record's "userid" value
 * @method GameHistory setUsername()          Sets the current record's "username" value
 * @method GameHistory setCash()              Sets the current record's "cash" value
 * @method GameHistory setCurrentcash()       Sets the current record's "currentcash" value
 * @method GameHistory setDescription()       Sets the current record's "description" value
 * @method GameHistory setGameid()            Sets the current record's "gameid" value
 * @method GameHistory setGametransactionid() Sets the current record's "gametransactionid" value
 * @method GameHistory setTime()              Sets the current record's "time" value
 * @method GameHistory setMoney()             Sets the current record's "money" value
 * @method GameHistory setCp()                Sets the current record's "cp" value
 * @method GameHistory setTitle()             Sets the current record's "title" value
 * @method GameHistory setTax()               Sets the current record's "tax" value
 * @method GameHistory setTaxpercent()        Sets the current record's "taxpercent" value
 * @method GameHistory setGold()              Sets the current record's "gold" value
 * @method GameHistory setCurrentgold()       Sets the current record's "currentgold" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     ngoctv1
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseGameHistory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('game_history');
        $this->hasColumn('gamehistoryid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('userid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('username', 'string', 75, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 75,
             ));
        $this->hasColumn('cash', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('currentcash', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('description', 'string', 6000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 6000,
             ));
        $this->hasColumn('gameid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('gametransactionid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('time', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('money', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('cp', 'string', 1000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1000,
             ));
        $this->hasColumn('title', 'string', 1000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1000,
             ));
        $this->hasColumn('tax', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('taxpercent', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('gold', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('currentgold', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}