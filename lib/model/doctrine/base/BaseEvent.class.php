<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Event', 'doctrine');

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $eventid
 * @property string $name
 * @property string $content
 * @property timestamp $starttime
 * @property timestamp $endtime
 * @property timestamp $createdtime
 * @property string $author
 * @property integer $daily
 * @property integer $weekly
 * @property integer $monthly
 * @property string $photo
 * @property string $cp
 * @property timestamp $regstarttime
 * @property timestamp $regendtime
 * @property integer $status
 * 
 * @method integer   getEventid()      Returns the current record's "eventid" value
 * @method string    getName()         Returns the current record's "name" value
 * @method string    getContent()      Returns the current record's "content" value
 * @method timestamp getStarttime()    Returns the current record's "starttime" value
 * @method timestamp getEndtime()      Returns the current record's "endtime" value
 * @method timestamp getCreatedtime()  Returns the current record's "createdtime" value
 * @method string    getAuthor()       Returns the current record's "author" value
 * @method integer   getDaily()        Returns the current record's "daily" value
 * @method integer   getWeekly()       Returns the current record's "weekly" value
 * @method integer   getMonthly()      Returns the current record's "monthly" value
 * @method string    getPhoto()        Returns the current record's "photo" value
 * @method string    getCp()           Returns the current record's "cp" value
 * @method timestamp getRegstarttime() Returns the current record's "regstarttime" value
 * @method timestamp getRegendtime()   Returns the current record's "regendtime" value
 * @method integer   getStatus()       Returns the current record's "status" value
 * @method Event     setEventid()      Sets the current record's "eventid" value
 * @method Event     setName()         Sets the current record's "name" value
 * @method Event     setContent()      Sets the current record's "content" value
 * @method Event     setStarttime()    Sets the current record's "starttime" value
 * @method Event     setEndtime()      Sets the current record's "endtime" value
 * @method Event     setCreatedtime()  Sets the current record's "createdtime" value
 * @method Event     setAuthor()       Sets the current record's "author" value
 * @method Event     setDaily()        Sets the current record's "daily" value
 * @method Event     setWeekly()       Sets the current record's "weekly" value
 * @method Event     setMonthly()      Sets the current record's "monthly" value
 * @method Event     setPhoto()        Sets the current record's "photo" value
 * @method Event     setCp()           Sets the current record's "cp" value
 * @method Event     setRegstarttime() Sets the current record's "regstarttime" value
 * @method Event     setRegendtime()   Sets the current record's "regendtime" value
 * @method Event     setStatus()       Sets the current record's "status" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     diepth2
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('eventid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('content', 'string', 5000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 5000,
             ));
        $this->hasColumn('starttime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('endtime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('createdtime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('author', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('daily', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('weekly', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('monthly', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('photo', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('cp', 'string', 70, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 70,
             ));
        $this->hasColumn('regstarttime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('regendtime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}