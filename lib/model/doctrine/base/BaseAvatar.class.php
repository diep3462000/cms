<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Avatar', 'doctrine');

/**
 * BaseAvatar
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $avatarid
 * @property string $name
 * @property string $description
 * @property string $path
 * @property integer $cash
 * @property integer $gold
 * @property timestamp $createdtime
 * @property integer $width
 * @property integer $height
 * @property integer $status
 * @property blob $_bytes
 * 
 * @method integer   getAvatarid()    Returns the current record's "avatarid" value
 * @method string    getName()        Returns the current record's "name" value
 * @method string    getDescription() Returns the current record's "description" value
 * @method string    getPath()        Returns the current record's "path" value
 * @method integer   getCash()        Returns the current record's "cash" value
 * @method integer   getGold()        Returns the current record's "gold" value
 * @method timestamp getCreatedtime() Returns the current record's "createdtime" value
 * @method integer   getWidth()       Returns the current record's "width" value
 * @method integer   getHeight()      Returns the current record's "height" value
 * @method integer   getStatus()      Returns the current record's "status" value
 * @method blob      get_bytes()      Returns the current record's "_bytes" value
 * @method Avatar    setAvatarid()    Sets the current record's "avatarid" value
 * @method Avatar    setName()        Sets the current record's "name" value
 * @method Avatar    setDescription() Sets the current record's "description" value
 * @method Avatar    setPath()        Sets the current record's "path" value
 * @method Avatar    setCash()        Sets the current record's "cash" value
 * @method Avatar    setGold()        Sets the current record's "gold" value
 * @method Avatar    setCreatedtime() Sets the current record's "createdtime" value
 * @method Avatar    setWidth()       Sets the current record's "width" value
 * @method Avatar    setHeight()      Sets the current record's "height" value
 * @method Avatar    setStatus()      Sets the current record's "status" value
 * @method Avatar    set_bytes()      Sets the current record's "_bytes" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     diepth2
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAvatar extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('avatar');
        $this->hasColumn('avatarid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('description', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('path', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('cash', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('gold', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('createdtime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('width', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('height', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('_bytes', 'blob', null, array(
             'type' => 'blob',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}