<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('EventRegister', 'doctrine');

/**
 * BaseEventRegister
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $eventregisterid
 * @property integer $eventid
 * @property string $username
 * @property string $fullname
 * @property string $email
 * @property string $phone
 * @property timestamp $registeredtime
 * @property string $ym
 * @property integer $rank
 * @property string $comment
 * @property string $identity
 * @property string $startcash
 * @property integer $status
 * 
 * @method integer       getEventregisterid() Returns the current record's "eventregisterid" value
 * @method integer       getEventid()         Returns the current record's "eventid" value
 * @method string        getUsername()        Returns the current record's "username" value
 * @method string        getFullname()        Returns the current record's "fullname" value
 * @method string        getEmail()           Returns the current record's "email" value
 * @method string        getPhone()           Returns the current record's "phone" value
 * @method timestamp     getRegisteredtime()  Returns the current record's "registeredtime" value
 * @method string        getYm()              Returns the current record's "ym" value
 * @method integer       getRank()            Returns the current record's "rank" value
 * @method string        getComment()         Returns the current record's "comment" value
 * @method string        getIdentity()        Returns the current record's "identity" value
 * @method string        getStartcash()       Returns the current record's "startcash" value
 * @method integer       getStatus()          Returns the current record's "status" value
 * @method EventRegister setEventregisterid() Sets the current record's "eventregisterid" value
 * @method EventRegister setEventid()         Sets the current record's "eventid" value
 * @method EventRegister setUsername()        Sets the current record's "username" value
 * @method EventRegister setFullname()        Sets the current record's "fullname" value
 * @method EventRegister setEmail()           Sets the current record's "email" value
 * @method EventRegister setPhone()           Sets the current record's "phone" value
 * @method EventRegister setRegisteredtime()  Sets the current record's "registeredtime" value
 * @method EventRegister setYm()              Sets the current record's "ym" value
 * @method EventRegister setRank()            Sets the current record's "rank" value
 * @method EventRegister setComment()         Sets the current record's "comment" value
 * @method EventRegister setIdentity()        Sets the current record's "identity" value
 * @method EventRegister setStartcash()       Sets the current record's "startcash" value
 * @method EventRegister setStatus()          Sets the current record's "status" value
 * 
 * @package    Vt_Portals
 * @subpackage model
 * @author     diepth2
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEventRegister extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event_register');
        $this->hasColumn('eventregisterid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('eventid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 75, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 75,
             ));
        $this->hasColumn('fullname', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('registeredtime', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('ym', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('rank', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('comment', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('identity', 'string', 25, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('startcash', 'string', 40, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 40,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}